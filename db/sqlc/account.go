package db

import (
	"context"
	"fmt"
	"strings"
)

type ListAccountsParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	Owner    string      `json:"owner"`
	Currency string      `json:"currency"`
	OrderBy  interface{} `json:"order_by"`
}

// ListAccounts method is for dynamic where statement since sqlc doesn't support it
// this method will be the higher layer of listAccounts generated by sqlc
func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	orderBy := strings.ReplaceAll(arg.OrderBy.(string), "__", " ")
	condition := "true"

	if arg.Owner != "" {
		condition += fmt.Sprintf(" AND owner = '%s'", arg.Owner)
	}

	if arg.Currency != "" {
		condition += fmt.Sprintf(" AND currency = '%s'", arg.Currency)
	}

	items, err := q.listAccounts(ctx, listAccountsParams{
		Limit:     arg.Limit,
		Offset:    arg.Offset,
		Condition: condition,
		OrderBy:   orderBy,
	})

	if err != nil {
		return nil, err
	}
	return items, nil
}
